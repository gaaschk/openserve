buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:0.5.0.BUILD-SNAPSHOT")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'war'

ext {
    springBootVersion = '0.5.0.M6'
    springFrameworkVersion = '4.0.0.RELEASE'
    springDataRestVersion = '2.0.0.M1'
    
    springSecurityVersion = '3.2.0.RELEASE'
    droolsVersion = '5.5.0.Final'
    jodaTimeVersion = '2.2'
    springSocialVersion = '1.0.3.RELEASE' 
    dbmaintainVersion = '2.4'
}

configurations.all{
    resolutionStrategy{
        eachDependency { DependencyResolveDetails details ->
            //specifying a fixed version for all libraries with 'org.springframework' group
            if (details.requested.group == 'org.springframework') {
                details.useVersion"${springFrameworkVersion}"
            }
        }
    }
}

eclipse {
    classpath {
       downloadSources=true
    }
}

jar {
    baseName = 'openserv'
    version =  '0.1.0'
}

repositories {
    maven { url "https://www.laertessoft.biz/artifactory/repo" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

    compile("org.springframework.data:spring-data-rest-webmvc:${springDataRestVersion}")
    
	compile ("commons-collections:commons-collections:3.2.1")
    compile ("commons-beanutils:commons-beanutils:1.8.0")
    
    compile ("org.drools:drools-core:${droolsVersion}")
    compile ("org.drools:drools-compiler:${droolsVersion}")

    compile ("joda-time:joda-time:${jodaTimeVersion}")
    
    compile ("org.springframework.social:spring-social-web:${springSocialVersion}")
    compile ("org.springframework.social:spring-social-facebook:${springSocialVersion}")
    compile ("org.springframework.social:spring-social-facebook-web:${springSocialVersion}")
    compile ("org.springframework.social:spring-social-twitter:${springSocialVersion}")

    compile ("org.dbmaintain:dbmaintain:${dbmaintainVersion}")
    
	compile ("org.mockito:mockito-all:1.9.5")
	compile ("org.skyscreamer:jsonassert:1.2.0")
	
	compile ("commons-dbcp:commons-dbcp:1.4")
	compile ("commons-io:commons-io:2.4")
	compile ("mysql:mysql-connector-java:5.1.22")
	compile ("org.yaml:snakeyaml:1.13")
	compile ("jstl:jstl:1.2")
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

task updateDatabase{
        ant.taskdef(resource: "dbmaintain-anttasks.xml", classpath: configurations.runtime.asPath)
        ant.projectDir = projectDir
        ant.updateDatabase(scriptLocations: '${projectDir}/src/main/dbscripts', autoCreateDbMaintainScriptsTable: true, qualifiers: 'scripts', fromScratchEnabled: true){
                database(driverClassName: jdbcDriverClassName,
                                url: jdbcUrl,
                                userName: jdbcUsername,
                                password: jdbcPassword,
                                schemaNames: jdbcSchema)        
        }
}

task generateDroolsIndexes(type: createDroolsIndexFiles) {
}

class createDroolsIndexFiles extends DefaultTask{
    @TaskAction
    def createIndexes(){
        println "Task is executing"
        def packageIndex = new File('src/main/resources/rules/packages/index.list')
        def drlIndex = new File('src/main/resources/rules/drl/index.list')
        def pkg = ~/.*\.package/
        def drl = ~/.*\.drl/
        
        packageIndex.withWriter { writer ->
            new File('src/main/resources/rules/packages').eachFileMatch(pkg){
                f ->
                writer.writeLine f.name
            }
        }

        drlIndex.withWriter { writer ->
            new File('src/main/resources/rules/drl').eachFileMatch(drl){
                f ->
                writer.writeLine f.name
            }
        }
    }
}

test.dependsOn generateDroolsIndexes
test.dependsOn updateDatabase