apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'sonar-runner'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'gradlecm'

webAppDirName = 'WebContent'

sourceCompatibility=1.7
targetCompatibility=1.7

ext{
	springVersion = '3.2.3.RELEASE'
	springSecurityVersion = '3.1.4.RELEASE'
	springDataVersion = '1.4.1.RELEASE'
	springWebFlowVersion = '2.3.2.RELEASE'
	springSocialVersion = '1.0.2.RELEASE' 
	querydslVersion = '3.2.3'
	hibernateVersion = '4.2.4.Final'
	hibernateValidatorVersion = '5.0.1.Final'
	droolsVersion = '5.5.0.Final'
	junitVersion = '4.11'
	jodaTimeVersion = '2.2'
	apacheCommonsCodecVersion = '1.8'
	log4jVersion = '1.2.17'
	dbmaintainVersion = '2.4'
	aspectjVersion = '1.7.2'
	tilesVersion = '3.0.1'
	jacksonVersion = '2.2.2'
	jsonAssertVersiont = '1.2.0'
}

sourceSets.main.java.srcDir 'src/querydsl/java'

configureEnv()

buildvcs {
    type = 'git'
}

repositories{
	maven{
		url "${repositoryHost}/artifactory/repo"
	}
}

uploadArchives{
	repositories{
		maven{
			credentials{
				username "${repoUsername}"
				password "${repoPassword}"
			}
			def branchName = buildvcs.getBranchName()
			if (branchName == 'release') {
				url "${repositoryHost}/artifactory/libs-release-local"
			}
			else {
				url "${repositoryHost}/artifactory/libs-snapshot-local"
			}
		}
	}
}

configurations {
	all*.exclude group: 'org.codehaus.jackson'
}

dependencies{
	compile ("org.kercheval:GradleCMPlugin:1.15-SNAPSHOT")
	compile ("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	compile ("org.springframework.security:spring-security-web:${springSecurityVersion}")
	runtime ("org.springframework.security:spring-security-taglibs:${springSecurityVersion}")
	runtime ("org.springframework.security:spring-security-config:${springSecurityVersion}")
	compile ("org.springframework:spring-context:${springVersion}")
	compile ("org.springframework:spring-test:${springVersion}")
	compile ("org.springframework:spring-webmvc:${springVersion}")
	compile ("org.springframework:spring-web:${springVersion}")
	compile ("org.springframework:spring-tx:${springVersion}")
	compile ("org.springframework.data:spring-data-jpa:${springDataVersion}")
	compile ("org.springframework.social:spring-social-web:${springSocialVersion}")
	compile ("org.springframework.social:spring-social-facebook:${springSocialVersion}")
	compile ("org.springframework.social:spring-social-facebook-web:${springSocialVersion}")
	compile ("org.springframework.social:spring-social-twitter:${springSocialVersion}")
	compile ("org.springframework.webflow:spring-webflow:${springWebFlowVersion}")

	compile ("commons-codec:commons-codec:${apacheCommonsCodecVersion}")
	compile ("commons-lang:commons-lang:2.6")
	compile ("commons-collections:commons-collections:3.2.1")
	compile ("commons-beanutils:commons-beanutils:1.8.0")
	runtime ("commons-dbcp:commons-dbcp:1.4")

	compile ("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
	compile ("org.hibernate:hibernate-validator-annotation-processor:${hibernateValidatorVersion}")
	compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")

	providedCompile ("javax.servlet:servlet-api:2.5")
	providedCompile ("javax.servlet.jsp:jsp-api:2.1")
	compile ("javax.servlet:jstl:1.2")

	compile ("com.mysema.querydsl:querydsl-jpa:${querydslVersion}")
	compile ("com.mysema.querydsl:querydsl-apt:${querydslVersion}")
	
	compile ("org.drools:drools-core:${droolsVersion}")
	compile ("org.drools:drools-compiler:${droolsVersion}")

	compile ("org.apache.tiles:tiles-core:${tilesVersion}")
	compile ("org.apache.tiles:tiles-jsp:${tilesVersion}")
	
	compile ("junit:junit:${junitVersion}")
	compile ("joda-time:joda-time:${jodaTimeVersion}")
	compile ("log4j:log4j:${log4jVersion}")
	compile ("org.javassist:javassist:3.15.0-GA")
	compile ("javax.validation:validation-api:1.0.0.GA")
	compile ("org.dbmaintain:dbmaintain:${dbmaintainVersion}")
	runtime ("mysql:mysql-connector-java:5.1.22")
	runtime ("org.aspectj:aspectjweaver:${aspectjVersion}")
	compile ("org.mockito:mockito-all:1.9.5")
	compile ("org.skyscreamer:jsonassert:1.2.0")
}

def configureEnv(){
	ext.environment = hasProperty('teamcity')?'ci':hasProperty('environment')?environment:'local'
	ext.repositoryHost = hasProperty('teamcity')?'http://192.168.10.9:8081':'https://www.laertessoft.biz'
//	ext.repositoryHost = 'http://192.168.10.9:8081'
	ext.sonarHost = hasProperty('teamcity')?'http://192.168.10.9:9000':'https://www.laertessoft.biz'
	println "Building environment: $environment"
	def config = new ConfigSlurper().parse(file('env/'+environment+'.gradle').toURI().toURL())
	ext.config = config	
}

sonarRunner{
	sonarProperties{
		property "sonar.host.url", "${sonarHost}/sonar"
		property "sonar.jdbc.url", "jdbc:mysql://192.168.10.9:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true"
		property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
		property "sonar.jdbc.username", "sonar"
		property "sonar.jdbc.password", "sonar"
		property "sonar.projectKey", "openserv:openserv"
	}
}

jacoco{
	reportsDir = file("${buildDir}/target")
}

jacocoTestReport{
	reports{
		xml.enabled true
		html.destination "${buildDir}/target"
	}
}

task generateQueryDSL (type: JavaCompile) {
	source = 'src/main/java'
	classpath = configurations.compile
	options.compilerArgs = [
		"-proc:only",
		"-processor", "com.mysema.query.apt.hibernate.HibernateAnnotationProcessor"
	]
	destinationDir = file('src/querydsl/java')
}

task updateDatabase{
	ant.taskdef(resource: "dbmaintain-anttasks.xml", classpath: configurations.runtime.asPath)
	ant.projectDir = projectDir
	ant.updateDatabase(scriptLocations: '${projectDir}/src/main/dbscripts', autoCreateDbMaintainScriptsTable: true, qualifiers: 'scripts', fromScratchEnabled: true){
		database(driverClassName: config.openserv.db.driver, 
				url: config.openserv.db.url, 
				userName: config.openserv.db.username, 
				password: config.openserv.db.password,
				schemaNames: config.openserv.db.schemas)	
	}
}

task packageScripts{
	ant.taskdef(resource: "dbmaintain-anttasks.xml", classpath: configurations.runtime.asPath)
	ant.projectDir = projectDir
	ant.createScriptArchive(scriptLocations: '${projectDir}/src/main/dbscripts', 
							qualifiers: 'scripts', 
							archiveFileName: "openserv-scripts.zip")
}

compileJava.dependsOn generateQueryDSL
test.dependsOn updateDatabase
assemble.dependsOn packageScripts
uploadArchives.dependsOn buildversion

task wrapper(type: Wrapper){
	gradleVersion = "1.7"
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
  def checked = [:]
  def detachedConfig = configurations.detachedConfiguration()
  allprojects{
	  configurations.each{configuration ->
		  configuration.allDependencies.each{ dependency ->
			  detachedConfig.dependencies.add(dependencies.create(dependency.group+':'+dependency.name+':latest.integration'))
		  }
	  }
  }	
  
  def allVersions = detachedConfig.incoming.resolutionResult.allModuleVersions
  allVersions.removeAll{it.id.version.toLowerCase().contains('alpha')}
  allVersions.removeAll{it.id.version.toLowerCase().contains('beta')}
  allVersions.removeAll{it.id.version.toLowerCase().contains('rc')}

  allprojects{
	  configurations.each{configuration ->
		  configuration.allDependencies.each{ dependency ->
			  def newest = allVersions.findResult{(it.id.group == dependency.group && it.id.name == dependency.name)?it:null}
			  if(newest != null && dependency.version != newest.id.version) {
				  println "$dependency.group:$dependency.name $dependency.version -> $newest.id.version"
			  }

		  }
	  }
  }	
}

ext.buildMajorVersion = 0
ext.buildMinorVersion = 2
group = 'org.gsoft'

buildversion{
    version.updateMajor(new Integer(buildMajorVersion)) 
    version.setMinor(new Integer(buildMinorVersion)) 
	version.pattern = '%M%.%m%.%b%-%d%.%t%'
	doLast{
		println "Project Version: " + project.version
		//
        // Set the pattern after the tags have been used to set the initial 
        // values.  Release gets the default pattern of the maven default 
        //
        def branchName = buildvcs.getBranchName()
        if (branchName != 'release' &&
            !project.hasProperty('noSnapshot')) {
            version.setPattern("%M%.%m%-SNAPSHOT") 
        }
        println("Currently working on sources for " + version);
    }
}

buildscript {
    repositories {
        mavenCentral()
        mavenRepo url: 'http://kercheval.org/mvn-repo/releases'
    }
    dependencies {
        classpath 'org.kercheval:GradleCMPlugin:+'
    }
}
