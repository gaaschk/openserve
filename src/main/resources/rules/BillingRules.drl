package billing

import org.gsoft.openserv.domain.loan.Loan
import org.gsoft.openserv.domain.loan.Account
import org.gsoft.openserv.domain.loan.LoanTypeProfile
import org.gsoft.openserv.domain.payment.billing.BillingStatement
import org.gsoft.openserv.buslogic.payment.BillingStatementLogic
import org.gsoft.openserv.repositories.payment.BillingStatementRepository
import org.gsoft.openserv.repositories.loan.LoanTypeProfileRepository
import java.util.Date
import java.util.Calendar
import java.util.HashMap
import org.springframework.context.ApplicationContext

global ApplicationContext springContext

declare LoanDueDateWrapper
	loanId : Long
	isStatementNeeded : boolean
end

rule "Build Loan DueDate Wrapper"
	when
		$l : Loan(effectiveLoanTypeProfile != null, $loanId : loanID, account != null)
		$a : Account() from $l.account
		not LoanDueDateWrapper(loanId == $loanId)
	then
		LoanDueDateWrapper lw = new LoanDueDateWrapper();
		lw.setLoanId($loanId);
		boolean isNeeded = springContext.getBean(BillingStatementLogic.class).isBillingStatementNeeded($l);
		lw.setIsStatementNeeded(isNeeded);
		insert(lw);
end
	
rule "Generate Billing Statement"
	when
		$lw : LoanDueDateWrapper(isStatementNeeded, $loanId : loanId)
		$l : Loan(loanID == $loanId)
	then
		System.out.println("Generating a billing statement");
		BillingStatementLogic logic = springContext.getBean(BillingStatementLogic.class);
		System.out.println("Logic is: " + logic);
		logic.createBillingStatement($l);
		boolean isStatementNeeded = logic.isBillingStatementNeeded($l);
		$lw.setIsStatementNeeded(isStatementNeeded);
		update($l);
		update($lw);
end
