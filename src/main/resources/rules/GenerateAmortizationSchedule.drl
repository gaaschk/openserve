package loan

import org.gsoft.openserv.domain.loan.Loan
import org.gsoft.openserv.buslogic.amortization.AmortizationLogic
import org.springframework.context.ApplicationContext
import org.gsoft.openserv.domain.interest.LoanRateValue
import org.gsoft.openserv.repositories.rates.LoanRateValueRepository
import java.util.Arrays
import java.util.List
import java.util.Date

global ApplicationContext springContext

declare LoanRateValueLoaded
	loanId : long
end

declare MissingAmortizationDates
	loanId : long
	dates : List
end

declare AmortizationSchedulesGenerated
	loanId : long
end

rule "Load Missing Amortization Dates"
	when
		$l : Loan(effectiveLoanTypeProfile != null, repaymentStartDate != null)
		LoanInterestRateUpdated(loanId == $l.loanID)
		not MissingAmortizationDates(loanId == $l.loanID)
	then
		System.out.println("Load Missing Amortization Schedule Dates");
		List<Date> missingDates = springContext.getBean(AmortizationLogic.class).getMissingAmortizationScheduleDates(Arrays.asList($l.getLoanID()));
		MissingAmortizationDates dates = new MissingAmortizationDates($l.getLoanID(), missingDates);
		insert(dates);
end

rule "Generate Missing Amortization Schedules"
	when
		$l : Loan(effectiveLoanTypeProfile != null, repaymentStartDate != null)
		$mad : MissingAmortizationDates(loanId == $l.loanID, dates != null, dates.size > 0)
		not AmortizationSchedulesGenerated(loanId == $l.loanID)
	then
		System.out.println("Generating Missing Amortization Schedules");
		springContext.getBean(AmortizationLogic.class).createAmortizationSchedule(Arrays.asList($l.getLoanID()), $mad.getDates());
		AmortizationSchedulesGenerated flag = new AmortizationSchedulesGenerated($l.getLoanID());
		insert(flag);
		update($l);
end
