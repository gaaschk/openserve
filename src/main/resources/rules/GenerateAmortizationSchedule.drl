package payment

import org.gsoft.openserv.domain.loan.Loan
import org.gsoft.openserv.buslogic.amortization.AmortizationLogic
import org.springframework.context.ApplicationContext
import org.gsoft.openserv.domain.interest.LoanRateValue
import org.gsoft.openserv.repositories.rates.LoanRateValueRepository
import java.util.Arrays

global ApplicationContext springContext

declare LoanAmortizationWrapper
	loan : Loan
	lrv : LoanRateValue
	updated : boolean
end

rule "Create Loan Amortization Wrapper"
	when
		$l : Loan(currentAmortizationSchedule == null, effectiveLoanTypeProfile != null, repaymentStartDate != null)
		not LoanAmortizationWrapper(loan.loanID == $l.loanID)		
	then
		System.out.println("Creating LoanAmortizationWrapper");
		LoanAmortizationWrapper law = new LoanAmortizationWrapper();
		law.setLoan($l);
		LoanRateValue lrv = springContext.getBean(LoanRateValueRepository.class).findMostRecentLoanRateValueForLoan($l.getLoanID());
		law.setLrv(lrv);
		law.setUpdated(false);
		insert(law);
end

rule "Generate Amortization Schedule"
	when
		$l : Loan(currentAmortizationSchedule == null, effectiveLoanTypeProfile != null, repaymentStartDate != null)
		$law : LoanAmortizationWrapper(loan.loanID == $l.loanID, lrv != null, updated == false)
	then
		System.out.println("Generating the Amortization Schedule");
		springContext.getBean(AmortizationLogic.class).createAmortizationSchedule(Arrays.asList($l.getLoanID()), $l.getRepaymentStartDate());
		$law.setUpdated(true);
		update($law);
		update($l);
end