package loan

import org.gsoft.openserv.domain.loan.Loan
import org.gsoft.openserv.buslogic.amortization.AmortizationLogic
import org.springframework.context.ApplicationContext
import org.gsoft.openserv.domain.interest.LoanRateValue
import org.gsoft.openserv.repositories.rates.LoanRateValueRepository
import java.util.Arrays

global ApplicationContext springContext

declare LoanRateValueLoaded
	loanId : long
end

rule "Load LoanRateValue"
	when
		$l : Loan(currentAmortizationSchedule == null, effectiveLoanTypeProfile != null, repaymentStartDate != null)
		LoanInterestRateUpdated(loanId == $l.loanID)
		not LoanRateValueLoaded(loanId == $l.loanID)		
	then
		System.out.println("Loading LoanRateValue");
		LoanRateValue lrv = springContext.getBean(LoanRateValueRepository.class).findLoanRateValueForLoanAsOf($l.getLoanID(), $l.getRepaymentStartDate());
		LoanRateValueLoaded lrvl = new LoanRateValueLoaded();
		lrvl.setLoanId($l.getLoanID());
		insert(lrvl);
		insert(lrv);
end

rule "Generate Amortization Schedule"
	when
		$l : Loan(currentAmortizationSchedule == null, effectiveLoanTypeProfile != null, repaymentStartDate != null)
		$lrv : LoanRateValue(loanID == $l.loanID, lockedDate <= $l.repaymentStartDate)
		LoanRateValueLoaded(loanId == $l.loanID)
	then
		System.out.println("Generating the Amortization Schedule");
		springContext.getBean(AmortizationLogic.class).createAmortizationSchedule(Arrays.asList($l.getLoanID()), $l.getRepaymentStartDate());
		update($l);
end